
EXERCISES

1. Write out a generic SELECT statement.

	SELECT id, hiredate 
	FROM employees
	WHERE id != 27
	AND hiredate > '01/01/2019';



2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

	SQL ORDER		MNEMONIC DEVICE	

	SELECT			SOMEONE
	FROM			FROM
	WHERE			WYOMING
	GROUP BY		GOES
	HAVING			HIKING
	ORDER BY		OUTSIDE



3. Given this dogs table, write queries to select the following pieces of data:
Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").


	a. Display the name, gender, and age of all dogs that are part Labrador.

		SELECT name, gender, age
		FROM dogs
		WHERE breed LIKE 'labrador%';



	b. Display the ids of all dogs that are under 1 year old.

		SELECT id 
		FROM dogs
		WHERE age < 1;


	c. Display the name and age of all dogs that are female and over 35lbs.

		SELECT name, age
		FROM dogs
		WHERE gender = 'F'
		AND age > 35;


	d. Display all of the information about all dogs that are not Shepherd mixes.

		SELECT *
		FROM dogs
		WHERE breed NOT LIKE '%shepherd';


	e. Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

		SELECT id, age, weight, breed
		FROM dogs
		WHERE weight > 60
 		OR breed = 'great dane';




4. Given this cats table, what records are returned from these queries?

	a. SELECT name, adoption_date FROM cats;

   name   | adoption_date 
----------+---------------
 Mushi    | 2016-03-22
 Seashell | 
 Azul     | 2016-04-17
 Victoire | 2016-09-01
 Nala     | 



	b. SELECT name, age FROM cats;

   name   | age 
----------+-----
 Mushi    |   1
 Seashell |   7
 Azul     |   3
 Victoire |   7
 Nala     |   1





5. From the cats table, write queries to select the following pieces of data.

	Display all the information about all of the available cats.

		SELECT *
		FROM cats
		WHERE adoption_date IS NOT NULL;


	Display the name and sex of all cats who are 7 years old.

		SELECT name, age
		FROM cats
 		WHERE age = 7;


	Find all of the names of the cats, so you don’t choose duplicate names for new cats.
		
		SELECT DISTINCT name
		FROM cats;



6. List each comparison operator and explain when you would use it. Include a real world example for each.

	
	= equal, to compare values  ex. WHERE color = 'blue';

	> greater than, to compare values ex. WHERE date > '01/01/2016';

	<  lower than, to compare values ex. WHERE salary < 70000;

	>= greater than or equal to, to compare values ex. WHERE age >= 21;

	<= less than or equal to, to compare values ex. WHERE hours <= 24;

	!= not equal to, to compare values ex. WHERE height != 5;

	<> greater than or lower than ex. WHERE miles < 100 OR > 50;

	BETWEEN returns true if the statement is within a range. ex. WHERE price BETWEEN 15 AND 30;

	OR one of the expressions need to be true to be returned. ex. WHERE price = 20 or cost = 10;

	NOT only returns row if the expression is false. ex. WHERE NOT bird_of_prey = 'eagle';

	AND returns row or rows if both conditions are true. ex. WHERE date < '06-30-2015' AND country = 'USA';

	IS NULL checks if cell is null or not. ex. WHERE application_date IS NULL;

	EXISTS evaluates to true if subquery returns something. Ex. WHERE EXISTS(SELECT employee_id FROM employees WHERE position != 'manager');         

	LIKE search for a specified pattern. ex. WHERE aircraft LIKE ‘boeing%’

	IS DISTINCT FROM returns only distinct values without duplicates. ex. SELECT DISTINCT name FROM employees;  





7. From the cats table, what data is returned from these queries?

	SELECT name FROM cats WHERE gender = ‘F’;

   name   
----------
 Seashell
 Nala
(2 rows)



	SELECT name FROM cats WHERE age <> 3;

   name   
----------
 Mushi
 Seashell
 Victoire
 Nala
(4 rows)



	SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;

  id 
----
  3
  4
(2 rows)




